"""
 This file is part of the domino-detection distribution (https://github.com/jmherzog-de/domino-detection).
 Copyright (c) 2021 Adam Mueller and Jean-Marcel Herzog.
  
 This program is free software: you can redistribute it and/or modify  
 it under the terms of the GNU General Public License as published by  
 the Free Software Foundation, version 3.
 
 This program is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of 
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 General Public License for more details.
 
 You should have received a copy of the GNU General Public License 
 along with this program. If not, see <http://www.gnu.org/licenses/>.
 """

import numpy as np
import cv2

class FilterBaseClass():
    """
    Base Class
    """

    def __init__(self, cvWindowName:str, cvWindowTitle:str, cvInputImage:np.ndarray, imageUpdateEcentCallback) -> None:
        """
        Class Constructor generate OpenCV window.

        :param cvWindowName: Unique name of the UI window.
        :type cvWindowName: str
        :param cvWindowTitle: Window title displayed on the top of the window.
        :type cvWindowTitle: str
        :param cvInputImage: OpenCV mat image input
        :type cvInputImage: np.ndarray
        :param imageUpdateEcentCallback: Callback function get called when some parameter of the filter has changed.
        :type imageUpdateEcentCallback: [type]
        """
        self._windowName    = cvWindowName
        self._cvImage       = cvInputImage.copy()
        self._cvProcImage   = cvInputImage.copy()
        self._cvHist        = cv2.calcHist(self._cvProcImage, [0], None, [256], [0, 256])
        self._callbackFct   = imageUpdateEcentCallback

        # CREATE WINDOW
        cv2.namedWindow(self._windowName, cv2.WINDOW_AUTOSIZE)
        cv2.setWindowTitle(self._windowName, cvWindowTitle)
    
    def Update(self, cvInputImage:np.ndarray):
        """
        Update the current image with a new OpenCV mat image.

        :param cvInputImage: New OpenCV image.
        :type cvInputImage: np.ndarray
        """
        self._cvImage   = cvInputImage.copy()
    
    def GetImage(self) -> np.ndarray:
        """
        Get the current OpenCV mat image generated by the filter.

        :return: Current OpenCV image.
        :rtype: np.ndarray
        """
        return self._cvProcImage.copy()
    
    def GetHist(self) -> np.ndarray:
        """
        Get the current OpenCV histogram generated by the filter.

        :return: Current histogram of the processed image.
        :rtype: np.ndarray
        """
        return self._cvHist